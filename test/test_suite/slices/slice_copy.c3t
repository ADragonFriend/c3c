// #target: macos-x64
// #safe: yes
module test;

fn int main()
{
	const FOO = "FOO";
	String str;
	str[:FOO.len] = FOO[..];
	return 0;
}

/* #expect: test.ll

define i32 @main() #0 {
entry:
  %str = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr1 = alloca i64, align 8
  %varargslots = alloca [2 x %any], align 16
  %indirectarg = alloca %"any[]", align 8
  %taddr3 = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %varargslots5 = alloca [2 x %any], align 16
  %indirectarg8 = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %varargslots13 = alloca [2 x %any], align 16
  %indirectarg16 = alloca %"any[]", align 8
  call void @llvm.memset.p0.i64(ptr align 8 %str, i8 0, i64 16, i1 false)
  %0 = load %"char[]", ptr %str, align 8
  %1 = extractvalue %"char[]" %0, 0
  %2 = extractvalue %"char[]" %0, 1
  %gt = icmp sgt i64 0, %2
  %3 = call i1 @llvm.expect.i1(i1 %gt, i1 false)
  br i1 %3, label %panic, label %checkok

checkok:                                          ; preds = %entry
  %lt = icmp slt i64 %2, 3
  %4 = call i1 @llvm.expect.i1(i1 %lt, i1 false)
  br i1 %4, label %panic2, label %checkok9

checkok9:                                         ; preds = %checkok
  %5 = insertvalue %"char[]" undef, ptr %1, 0
  %6 = insertvalue %"char[]" %5, i64 3, 1
  %7 = extractvalue %"char[]" %6, 0
  %8 = extractvalue %"char[]" %6, 1
  %neq = icmp ne i64 %8, 3
  %9 = call i1 @llvm.expect.i1(i1 %neq, i1 false)
  br i1 %9, label %panic10, label %checkok17

checkok17:                                        ; preds = %checkok9
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %7, ptr align 1 @.str.1, i64 3, i1 false)
  ret i32 0

panic:                                            ; preds = %entry
  store i64 %2, ptr %taddr, align 8
  %10 = insertvalue %any undef, ptr %taddr, 0
  %11 = insertvalue %any %10, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr1, align 8
  %12 = insertvalue %any undef, ptr %taddr1, 0
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %11, ptr %varargslots, align 16
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %13, ptr %ptradd, align 16
  %14 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %14, i64 2, 1
  store %"any[]" %"$$temp", ptr %indirectarg, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg, i64 61, ptr @.file, i64 13, ptr @.func, i64 4, i32 7, ptr byval(%"any[]") align 8 %indirectarg) #4
  unreachable

panic2:                                           ; preds = %checkok
  store i64 2, ptr %taddr3, align 8
  %15 = insertvalue %any undef, ptr %taddr3, 0
  %16 = insertvalue %any %15, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %2, ptr %taddr4, align 8
  %17 = insertvalue %any undef, ptr %taddr4, 0
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %any %16, ptr %varargslots5, align 16
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots5, i64 16
  store %any %18, ptr %ptradd6, align 16
  %19 = insertvalue %"any[]" undef, ptr %varargslots5, 0
  %"$$temp7" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp7", ptr %indirectarg8, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.2, i64 60, ptr @.file, i64 13, ptr @.func, i64 4, i32 7, ptr byval(%"any[]") align 8 %indirectarg8) #4
  unreachable

panic10:                                          ; preds = %checkok9
  store i64 %8, ptr %taddr11, align 8
  %20 = insertvalue %any undef, ptr %taddr11, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 3, ptr %taddr12, align 8
  %22 = insertvalue %any undef, ptr %taddr12, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %any %21, ptr %varargslots13, align 16
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %23, ptr %ptradd14, align 16
  %24 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %24, i64 2, 1
  store %"any[]" %"$$temp15", ptr %indirectarg16, align 8
  call void @std.core.builtin.panicf(ptr @.panic_msg.3, i64 38, ptr @.file, i64 13, ptr @.func, i64 4, i32 7, ptr byval(%"any[]") align 8 %indirectarg16) #4
  unreachable
}
